{
  "cases": [
    {
      "isVisible": true,
      "output": {
        "name": "result",
        "type": "array",
        "value": "[0,1]"
      },
      "params": [
        {
          "name": "nums",
          "type": "array",
          "value": "[2,7,11,15]"
        },
        {
          "name": "target",
          "type": "number",
          "value": "9"
        }
      ]
    },
    {
      "isVisible": true,
      "output": {
        "name": "result",
        "type": "array",
        "value": "[1,2]"
      },
      "params": [
        {
          "name": "nums",
          "type": "array",
          "value": "[3,2,4]"
        },
        {
          "name": "target",
          "type": "number",
          "value": "6"
        }
      ]
    },
    {
      "isVisible": true,
      "output": {
        "name": "result",
        "type": "array",
        "value": "[0,1]"
      },
      "params": [
        {
          "name": "nums",
          "type": "array",
          "value": "[3,3]"
        },
        {
          "name": "target",
          "type": "number",
          "value": "6"
        }
      ]
    }
  ],
  "description": {
    "en": "<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p> </p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p> </p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\n<li><code>2 <= nums.length <= 10<sup>4</sup></code></li>\n\n<li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\n\n<li><code>-10<sup>9</sup> <= target <= 10<sup>9</sup></code></li>\n\n<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p> </p>\n<strong>Follow-up: </strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face=\"monospace\"> </font>time complexity?",
    "vi": "<p>Cho một mảng các số nguyên <code>nums</code> và một số nguyên <code>target</code>, trả về <em>chỉ số của hai số sao cho chúng cộng lại bằng <code>target</code></em>.</p>\n\n<p>Bạn có thể giả định rằng mỗi đầu vào sẽ có <strong><em>chính xác</em> một giải pháp</strong>, và bạn không được sử dụng cùng một phần tử hai lần.</p>\n\n<p>Bạn có thể trả về câu trả lời theo bất kỳ thứ tự nào.</p>\n\n<p> </p>\n<p><strong class=\"example\">Ví dụ 1:</strong></p>\n\n<pre><strong>Đầu vào:</strong> nums = [2,7,11,15], target = 9\n<strong>Đầu ra:</strong> [0,1]\n<strong>Giải thích:</strong> Vì nums[0] + nums[1] == 9, chúng ta trả về [0, 1].\n</pre>\n\n<p><strong class=\"example\">Ví dụ 2:</strong></p>\n\n<pre><strong>Đầu vào:</strong> nums = [3,2,4], target = 6\n<strong>Đầu ra:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Ví dụ 3:</strong></p>\n\n<pre><strong>Đầu vào:</strong> nums = [3,3], target = 6\n<strong>Đầu ra:</strong> [0,1]\n</pre>\n\n<p> </p>\n<p><strong>Ràng buộc:</strong></p>\n\n<ul>\n\n<li><code>2 <= nums.length <= 10<sup>4</sup></code></li>\n\n<li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\n\n<li><code>-10<sup>9</sup> <= target <= 10<sup>9</sup></code></li>\n\n<li><strong>Chỉ có một câu trả lời hợp lệ tồn tại.</strong></li>\n</ul>\n\n<p> </p>\n<strong>Follow-up: </strong>Bạn có thể đưa ra một thuật toán có độ phức tạp thời gian nhỏ hơn <code>O(n<sup>2</sup>)</code><font face=\"monospace\"> </font>không?"
  },
  "functionName": "twoSum"
}
